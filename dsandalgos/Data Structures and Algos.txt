Data Structures and Algorithms 

** Big O **

Big O will always represent/measure the worst case.
O(n^2) -- "Loop within a loop"
O(n) -- Proportional 
O(log n) -- Divide and Conquer
O(1) -- Constant Time

Best time complexity for sorting anything non numbers, 
the best you can get is O n(log n) 

Linked List Big O: 

O(1) - to push something to the end (to the tail)
     - adding something to the head, removing from the beginning
O(n) - popping something from end of list, since you need to go through entire list to point the TAIL to the one right before. 
     - inserting a new node into the list at a certain place
     - deleting a node inside the LL
     - searching by value or index, still O(n), (different from array, array you can find by index at O(1))


STACKS: 
Pushing and popping. LIFO, Last in first out. 
Back button in your history as an example. 
Common way to implement is with ARRAY. Add and remove from same end. 
With arrays, O(1) for the end, O(n) if you are adding to beginning. ADD TO END! 
.push() and .pop() , built in to JS already. 

QUEUE: 
Enqueue and dequeue, FIFO first in first out 
Array, adding from end O(1), remove from front O(n), can't get away from having one side being O(n)
Linked List, enqueue from TAIL and dequeue from HEAD, both are O(1)!!
Instead of Head and Tail, we can call them First and Last using LL structure to build queue!


BINARY SEARCH TREE --
Better for lookup(), remove(), LL has better advantage for insert() because it's O(1)
Best possible O(log n) - very efficient/divide and conquer
To find the item, to remove the item, inserting - 
One node is 2^1 - 1, (or O(1))
Next level is 2^2 - 1, etc etc...
Fourth level is 2^4 

if BST is only one line, it would be similar to a LL and you'd have to iterate through the entire tree to find the Node. 
This would be worst cast, O(n), technically the Big O is O(n)
We treat BST as O(log n) 

 